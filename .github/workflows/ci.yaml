name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  mvp-ci:
    runs-on: ubuntu-latest

    env:
      BASE_URL: http://localhost:8000/api/v1
      REDIS_URL: redis://localhost:6379/0
      QUEUE_NAME: default
      FRONTEND_ORIGIN: http://localhost:3000
      STORAGE_PATH_UPLOADS: /tmp/first_cut/uploads
      STORAGE_PATH_OUTPUTS: /tmp/first_cut/outputs
      ALLOWED_UPLOAD_TYPES: audio/mpeg,audio/wav,text/plain,application/msword
      LOG_LEVEL: INFO
      REQUEST_ID_HEADER: X-Request-ID

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install system deps (Redis, curl)
        run: |
          sudo apt-get update
          sudo apt-get install -y redis-server curl
          sudo systemctl enable --now redis-server
          redis-cli ping

      - name: Create .env for backend
        run: |
          cat > .env << 'EOF'
          ENV=dev
          PORT=8000
          BASE_URL=${BASE_URL}
          FRONTEND_ORIGIN=${FRONTEND_ORIGIN}
          MAX_UPLOAD_MB=50
          ALLOWED_UPLOAD_TYPES=${ALLOWED_UPLOAD_TYPES}
          LOG_LEVEL=${LOG_LEVEL}
          REQUEST_ID_HEADER=${REQUEST_ID_HEADER}
          STORAGE_PATH_UPLOADS=${STORAGE_PATH_UPLOADS}
          STORAGE_PATH_OUTPUTS=${STORAGE_PATH_OUTPUTS}
          RETENTION_HOURS=72
          REDIS_URL=${REDIS_URL}
          QUEUE_NAME=${QUEUE_NAME}
          WORKER_CONCURRENCY=1
          CORS_ALLOW_ORIGIN=${FRONTEND_ORIGIN}
          EOF

      - name: Prepare sample file
        run: |
          mkdir -p backend/test_data
          printf "Sample text for first_cut MVP.\n" > backend/test_data/sample.txt

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install ruff pytest

      - name: Lint (ruff)
        run: |
          ruff --version
          ruff check backend

      - name: Unit tests (pytest, only if tests exist)
        if: ${{ hashFiles('tests/**/*.py') != '' }}
        run: pytest -q

      - name: Start backend (uvicorn) in background
        run: |
          uvicorn backend.app.main:app --host 0.0.0.0 --port 8000 --reload &
          echo $! > uvicorn.pid

      - name: Start RQ worker in background
        run: |
          nohup rq worker -u "${REDIS_URL}" "${QUEUE_NAME}" >/dev/null 2>&1 &
          echo $! > rq.pid

      - name: Wait for /health
        run: |
          for i in $(seq 1 30); do
            if curl -sf http://localhost:8000/health >/dev/null; then
              exit 0
            fi
            sleep 1
          done
          echo "Backend health check failed"; exit 1

      - name: Smoke test (upload → transcript → lead → article 202 → polling)
        run: |
          chmod +x scripts/curl/test_mvp.sh
          BASE_URL="${BASE_URL}" ./scripts/curl/test_mvp.sh "$(pwd)/backend/test_data/sample.txt"

      - name: Show worker/back-end status (debug on failure)
        if: failure()
        run: |
          ps aux | grep -E 'uvicorn|rq' | grep -v grep || true
          ls -lh /tmp/first_cut/outputs || true
          tail -n +1 -v /tmp/first_cut/outputs/*.txt || true

      - name: Stop background processes
        if: always()
        run: |
          kill $(cat uvicorn.pid) 2>/dev/null || true
          kill $(cat rq.pid) 2>/dev/null || true
